// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { PlantLifecycleStage } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Plants")));
bytes32 constant PlantsTableId = _tableId;

struct PlantsData {
  uint32 chainId;
  address contractAddress;
  uint256 tokenId;
  address grower;
  uint8 plot;
  uint256 plantedAt;
  uint256 wateredAt;
  uint256 entropy;
  PlantLifecycleStage lifecycleStage;
  string ipfsHash;
}

library Plants {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](10);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.ADDRESS;
    _schema[2] = SchemaType.UINT256;
    _schema[3] = SchemaType.ADDRESS;
    _schema[4] = SchemaType.UINT8;
    _schema[5] = SchemaType.UINT256;
    _schema[6] = SchemaType.UINT256;
    _schema[7] = SchemaType.UINT256;
    _schema[8] = SchemaType.UINT8;
    _schema[9] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.ADDRESS;
    _schema[2] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](10);
    _fieldNames[0] = "chainId";
    _fieldNames[1] = "contractAddress";
    _fieldNames[2] = "tokenId";
    _fieldNames[3] = "grower";
    _fieldNames[4] = "plot";
    _fieldNames[5] = "plantedAt";
    _fieldNames[6] = "wateredAt";
    _fieldNames[7] = "entropy";
    _fieldNames[8] = "lifecycleStage";
    _fieldNames[9] = "ipfsHash";
    return ("Plants", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get chainId */
  function getChainId(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint32 chainId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get chainId (using the specified store) */
  function getChainId(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint32 chainId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set chainId */
  function setChainId(uint32 chainId_, address contractAddress_, uint256 tokenId_, uint32 chainId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((chainId)));
  }

  /** Set chainId (using the specified store) */
  function setChainId(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint32 chainId
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((chainId)));
  }

  /** Get contractAddress */
  function getContractAddress(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (address contractAddress) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get contractAddress (using the specified store) */
  function getContractAddress(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (address contractAddress) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set contractAddress */
  function setContractAddress(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    address contractAddress
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((contractAddress)));
  }

  /** Set contractAddress (using the specified store) */
  function setContractAddress(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    address contractAddress
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((contractAddress)));
  }

  /** Get tokenId */
  function getTokenId(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint256 tokenId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get tokenId (using the specified store) */
  function getTokenId(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint256 tokenId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set tokenId */
  function setTokenId(uint32 chainId_, address contractAddress_, uint256 tokenId_, uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((tokenId)));
  }

  /** Set tokenId (using the specified store) */
  function setTokenId(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint256 tokenId
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((tokenId)));
  }

  /** Get grower */
  function getGrower(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (address grower) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get grower (using the specified store) */
  function getGrower(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (address grower) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set grower */
  function setGrower(uint32 chainId_, address contractAddress_, uint256 tokenId_, address grower) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((grower)));
  }

  /** Set grower (using the specified store) */
  function setGrower(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    address grower
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((grower)));
  }

  /** Get plot */
  function getPlot(uint32 chainId_, address contractAddress_, uint256 tokenId_) internal view returns (uint8 plot) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get plot (using the specified store) */
  function getPlot(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint8 plot) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set plot */
  function setPlot(uint32 chainId_, address contractAddress_, uint256 tokenId_, uint8 plot) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((plot)));
  }

  /** Set plot (using the specified store) */
  function setPlot(IStore _store, uint32 chainId_, address contractAddress_, uint256 tokenId_, uint8 plot) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((plot)));
  }

  /** Get plantedAt */
  function getPlantedAt(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint256 plantedAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get plantedAt (using the specified store) */
  function getPlantedAt(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint256 plantedAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set plantedAt */
  function setPlantedAt(uint32 chainId_, address contractAddress_, uint256 tokenId_, uint256 plantedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((plantedAt)));
  }

  /** Set plantedAt (using the specified store) */
  function setPlantedAt(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint256 plantedAt
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((plantedAt)));
  }

  /** Get wateredAt */
  function getWateredAt(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint256 wateredAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get wateredAt (using the specified store) */
  function getWateredAt(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint256 wateredAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set wateredAt */
  function setWateredAt(uint32 chainId_, address contractAddress_, uint256 tokenId_, uint256 wateredAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((wateredAt)));
  }

  /** Set wateredAt (using the specified store) */
  function setWateredAt(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint256 wateredAt
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((wateredAt)));
  }

  /** Get entropy */
  function getEntropy(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint256 entropy) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get entropy (using the specified store) */
  function getEntropy(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint256 entropy) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set entropy */
  function setEntropy(uint32 chainId_, address contractAddress_, uint256 tokenId_, uint256 entropy) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((entropy)));
  }

  /** Set entropy (using the specified store) */
  function setEntropy(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint256 entropy
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((entropy)));
  }

  /** Get lifecycleStage */
  function getLifecycleStage(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (PlantLifecycleStage lifecycleStage) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 8);
    return PlantLifecycleStage(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get lifecycleStage (using the specified store) */
  function getLifecycleStage(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (PlantLifecycleStage lifecycleStage) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 8);
    return PlantLifecycleStage(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set lifecycleStage */
  function setLifecycleStage(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    PlantLifecycleStage lifecycleStage
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 8, abi.encodePacked(uint8(lifecycleStage)));
  }

  /** Set lifecycleStage (using the specified store) */
  function setLifecycleStage(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    PlantLifecycleStage lifecycleStage
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 8, abi.encodePacked(uint8(lifecycleStage)));
  }

  /** Get ipfsHash */
  function getIpfsHash(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (string memory ipfsHash) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 9);
    return (string(_blob));
  }

  /** Get ipfsHash (using the specified store) */
  function getIpfsHash(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (string memory ipfsHash) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 9);
    return (string(_blob));
  }

  /** Set ipfsHash */
  function setIpfsHash(uint32 chainId_, address contractAddress_, uint256 tokenId_, string memory ipfsHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setField(_tableId, _keyTuple, 9, bytes((ipfsHash)));
  }

  /** Set ipfsHash (using the specified store) */
  function setIpfsHash(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    string memory ipfsHash
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setField(_tableId, _keyTuple, 9, bytes((ipfsHash)));
  }

  /** Get the length of ipfsHash */
  function lengthIpfsHash(uint32 chainId_, address contractAddress_, uint256 tokenId_) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 9, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of ipfsHash (using the specified store) */
  function lengthIpfsHash(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 9, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of ipfsHash (unchecked, returns invalid data if index overflows) */
  function getItemIpfsHash(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 9, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of ipfsHash (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemIpfsHash(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 9, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to ipfsHash */
  function pushIpfsHash(uint32 chainId_, address contractAddress_, uint256 tokenId_, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 9, bytes((_slice)));
  }

  /** Push a slice to ipfsHash (using the specified store) */
  function pushIpfsHash(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    string memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.pushToField(_tableId, _keyTuple, 9, bytes((_slice)));
  }

  /** Pop a slice from ipfsHash */
  function popIpfsHash(uint32 chainId_, address contractAddress_, uint256 tokenId_) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 9, 1);
  }

  /** Pop a slice from ipfsHash (using the specified store) */
  function popIpfsHash(IStore _store, uint32 chainId_, address contractAddress_, uint256 tokenId_) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.popFromField(_tableId, _keyTuple, 9, 1);
  }

  /** Update a slice of ipfsHash at `_index` */
  function updateIpfsHash(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint256 _index,
    string memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.updateInField(_tableId, _keyTuple, 9, _index * 1, bytes((_slice)));
  }

  /** Update a slice of ipfsHash (using the specified store) at `_index` */
  function updateIpfsHash(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint256 _index,
    string memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.updateInField(_tableId, _keyTuple, 9, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (PlantsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal view returns (PlantsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint32 chainId,
    address contractAddress,
    uint256 tokenId,
    address grower,
    uint8 plot,
    uint256 plantedAt,
    uint256 wateredAt,
    uint256 entropy,
    PlantLifecycleStage lifecycleStage,
    string memory ipfsHash
  ) internal {
    bytes memory _data = encode(
      chainId,
      contractAddress,
      tokenId,
      grower,
      plot,
      plantedAt,
      wateredAt,
      entropy,
      lifecycleStage,
      ipfsHash
    );

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    uint32 chainId,
    address contractAddress,
    uint256 tokenId,
    address grower,
    uint8 plot,
    uint256 plantedAt,
    uint256 wateredAt,
    uint256 entropy,
    PlantLifecycleStage lifecycleStage,
    string memory ipfsHash
  ) internal {
    bytes memory _data = encode(
      chainId,
      contractAddress,
      tokenId,
      grower,
      plot,
      plantedAt,
      wateredAt,
      entropy,
      lifecycleStage,
      ipfsHash
    );

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint32 chainId_, address contractAddress_, uint256 tokenId_, PlantsData memory _table) internal {
    set(
      chainId_,
      contractAddress_,
      tokenId_,
      _table.chainId,
      _table.contractAddress,
      _table.tokenId,
      _table.grower,
      _table.plot,
      _table.plantedAt,
      _table.wateredAt,
      _table.entropy,
      _table.lifecycleStage,
      _table.ipfsHash
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(
    IStore _store,
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_,
    PlantsData memory _table
  ) internal {
    set(
      _store,
      chainId_,
      contractAddress_,
      tokenId_,
      _table.chainId,
      _table.contractAddress,
      _table.tokenId,
      _table.grower,
      _table.plot,
      _table.plantedAt,
      _table.wateredAt,
      _table.entropy,
      _table.lifecycleStage,
      _table.ipfsHash
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (PlantsData memory _table) {
    // 174 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 174));

    _table.chainId = (uint32(Bytes.slice4(_blob, 0)));

    _table.contractAddress = (address(Bytes.slice20(_blob, 4)));

    _table.tokenId = (uint256(Bytes.slice32(_blob, 24)));

    _table.grower = (address(Bytes.slice20(_blob, 56)));

    _table.plot = (uint8(Bytes.slice1(_blob, 76)));

    _table.plantedAt = (uint256(Bytes.slice32(_blob, 77)));

    _table.wateredAt = (uint256(Bytes.slice32(_blob, 109)));

    _table.entropy = (uint256(Bytes.slice32(_blob, 141)));

    _table.lifecycleStage = PlantLifecycleStage(uint8(Bytes.slice1(_blob, 173)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 174) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 206;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.ipfsHash = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 chainId,
    address contractAddress,
    uint256 tokenId,
    address grower,
    uint8 plot,
    uint256 plantedAt,
    uint256 wateredAt,
    uint256 entropy,
    PlantLifecycleStage lifecycleStage,
    string memory ipfsHash
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(ipfsHash).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        chainId,
        contractAddress,
        tokenId,
        grower,
        plot,
        plantedAt,
        wateredAt,
        entropy,
        lifecycleStage,
        _encodedLengths.unwrap(),
        bytes((ipfsHash))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(
    uint32 chainId_,
    address contractAddress_,
    uint256 tokenId_
  ) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint32 chainId_, address contractAddress_, uint256 tokenId_) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint32 chainId_, address contractAddress_, uint256 tokenId_) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256((chainId_)));
    _keyTuple[1] = bytes32(uint256(uint160((contractAddress_))));
    _keyTuple[2] = bytes32(uint256((tokenId_)));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
